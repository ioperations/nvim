# vim: set fenc=utf-8 ft=dosini:

# define a new task named "file-build"
[file-build]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command:cpp=g++ "$(VIM_FILEPATH)" -lgtest -lpthread -lgmock -g -fsanitize=address -lm -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" && $(VIM_FILEDIR)/$(VIM_FILENOEXT)
command:c=gcc "$(VIM_FILEPATH)" -lgtest -lpthread -lgmock -fsanitize=address -lm -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" && $(VIM_FILEDIR)/$(VIM_FILENOEXT)
command:rust=cargo build
command:go=go build .

# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_FILEDIR)

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=1

# define a new task named "file-build"
[project-clean]
command= make clean 

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros

# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_ROOT)

[project-build]
command=make -j4
command:java=mvn test
# set the working directory to the project root.
cwd=$(VIM_ROOT)

output=quickfix

[project-run]
command=make run
# <root> is an alias to `$(VIM_ROOT)`, a little easier to type.
cwd=$(VIM_ROOT)
output=quickfix
