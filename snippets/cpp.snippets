snippet inp "include cpp"
    #include <${1:iostream>}

snippet fora " for auto ptr"
    for(auto ${1:ptr} : ${2:vector}){
        std::cout<< ${3:$1} << std::endl ;
    }

snippet usi "using namespace"
    using namespace ${1:std};

snippet sort " for auto ptr"
    sort(${1:a}.begin(),$1.end());

snippet find " for auto ptr"
    find(${1:a}.begin(),$1.end(),${2:1});

snippet forj "for loop"
    for(int ${1:i}=0; $1 != ${2:count}; $1++){
    
    }

snippet gtest "gtest framework"
    #include <iostream>
    #include <gtest/gtest.h>
    
    TEST(${1:testName},${2:testNum}){
    
    }
    
    int main(int argc, char *argv[])
    {
        testing::InitGoogleTest(&argc,argv);
        return RUN_ALL_TESTS();
    }
    
snippet test "test block"
    TEST(${1:testName},${2:testNum}){
    
    }

snippet testandbench "gtest and bench main"
    int main(int argc, char* argv[]) {
        testing::InitGoogleTest(&argc, argv);
        int ret = RUN_ALL_TESTS();
        ::benchmark::Initialize(&argc, argv);
        if (::benchmark::ReportUnrecognizedArguments(argc, argv)) return 1;
        ::benchmark::RunSpecifiedBenchmarks();
        ::benchmark::Shutdown();
        return ret;
    }

snippet walkarray "遍历数组"
    for(int i=0;i<${1:Row};i++){
        for(int j=0;j<${2:Col};j++){
            if(rand()%2){
                *((int*)${3:Array} +i*$2 + j) = 0;
            }
        }
    }

snippet little_endian "check if the system is little_endian"
    union {
        int i;
        char c[sizeof(int)];
    } x;
    
    x.i = 0x0001;
    // big endian
    // | 00000001 | 00000002 | 00000003 |0000004 |
    // |        0 |        0 |        0 |      1 |
    //
    // little endian
    // | 00000001 | 00000002 | 00000003 |0000004 |
    // |        1 |        0 |        0 |      0 |
    
    //little_endian
    if(x.c[0] == 1){
        ${1://TODO}
    }

snippet cerr " std::cerr output "
    std::cerr << ${1} << std::endl;

snippet process_bar "status process bar"
    // 让输出可以重新被覆盖
    std::cout << "\e[A";

snippet /* "the doxygen brief 中英语"
    /// * @brief ${1:brief comments}
    /// * ${2:the full story}

snippet // "the doxygen comment"
    /**
    \if english
    <pre>
    ${1:the english comment about this block}
    </pre>
    \else
    <pre>
    ${2: 中文注释}
    </pre>
    \endif
             */

snippet singleton " to generate a singleton"
    
    #include<iostream>
    #include<mutex>
    
    /// singleton class ${1:singleton}
    class $1 {
        public:
            static $1 * getInstance(){
                if (instance == NULL) {
                    objmutex.lock();
                    if(instance == NULL ){
                        instance = new $1();
                    }
                    objmutex.unlock();
                }
                return instance;
            };
        private:
            /// >>>> deconstructor
            ~$1(){
    
            }
            /// >>>> constructor
            $1(){
    
            }
            /// >>>> ensure the singleton being freed by c++ compiler
            class globalgc{
                public:
                    ~globalgc(){
                        if (instance) {
                            delete instance;
                        }
                    }
            };
    
            static globalgc gc_obj;
            static std::mutex objmutex;
            static $1* instance;
    
    };
    
    $1::globalgc $1::gc_obj;
    std::mutex $1::objmutex;
    $1 *  $1::instance = NULL ;
    

snippet binaryTree "c++ binaryTree template" 
    #include <iostream>
    template <typename T>
    struct tree {
        T data;
        tree *left, *right;
    };
    
    #if __cplusplus > 201703L
    template <typename T>
    concept fill_in_the_need_for_Btree = requires(T t1, T t2)
    {
        t1 > t2;
        t1 < t2;
        t1 = t2;
        std::cout << t1;
    };
    #endif
    
    #if __cplusplus > 201703L
    template <fill_in_the_need_for_Btree T>
    #else
    template <typename T>
    #endif
    class Btree {
    private:
        static int n;
        static int m;
        tree<T>* root;
    
    public:
        Btree()
        {
            root = nullptr;
        }
    
    protected:
        void erase_btree(tree<T>* root_)
        {
            if (root_ == nullptr) {
                return;
            }
    
            erase_btree(root_->left);
            erase_btree(root_->right);
            delete root_;
            return;
        }
    
        /// 先序遍历
        void preOrder(tree<T>* temp)
        {
            if (temp != nullptr) {
                std::cout << temp->data << " ";
                preOrder(temp->left);
                preOrder(temp->right);
            }
        }
        /// 中序遍历
        void inOrder(tree<T>* temp)
        {
            {
                if (temp != nullptr) {
                    inOrder(temp->left);
                    std::cout << temp->data << " ";
                    inOrder(temp->right);
                }
            }
        }
        /// 后序遍历
        void postOrder(tree<T>* temp)
        {
            if (temp != nullptr) {
                postOrder(temp->left);
                postOrder(temp->right);
                std::cout << temp->data << " ";
            }
        }
        /// 计算二叉树的个数
        int count(tree<T>* p)
        {
            if (p == nullptr)
                return 0;
            else
                return count(p->left) + count(p->right) + 1;
        }
        /// 求二叉树叶子的个数
        int findLeaf(tree<T>* temp)
        {
            if (temp == nullptr)
                return 0;
            else {
                if (temp->left == nullptr && temp->right == nullptr)
                    return n += 1;
                else {
                    findLeaf(temp->left);
                    findLeaf(temp->right);
                }
            }
            return 0;
        }
        /// 求二叉树叶子的个数
        int findNode(tree<T>* temp)
        {
            if (temp == nullptr)
                return 0;
            else {
                if (temp->left != nullptr && temp->right != nullptr) {
                    findNode(temp->left);
                    findNode(temp->right);
                }
                if (temp->left != nullptr && temp->right == nullptr) {
                    m += 1;
                    findNode(temp->left);
                }
                if (temp->left == nullptr && temp->right != nullptr) {
                    m += 1;
                    findNode(temp->right);
                }
            }
            return m;
        }
    
    public:
        void erase_btree()
        {
            erase_btree(root);
        }
        void create_Btree(T x)
        {
            {
                tree<T>* newNode = new tree<T>;
                newNode->data = x;
                newNode->right = newNode->left = nullptr;
                if (root == nullptr)
                    root = newNode;
                else {
                    tree<T>* back;
                    tree<T>* current = root;
                    while (current != nullptr) {
                        back = current;
                        if (current->data > x)
                            current = current->left;
                        else
                            current = current->right;
                    }
                    if (back->data > x)
                        back->left = newNode;
                    else
                        back->right = newNode;
                }
            }
        }
        ///先序遍历
        void preOrder()
        {
            preOrder(root);
        }
        ///中序遍历
        void inOrder()
        {
            inOrder(root);
        };
        ///后序遍历
        void postOrder()
        {
            postOrder(root);
        };
        ///计算二叉树的个数
        int count()
        {
            return count(root);
        };
        ///求二叉树叶子的个数
        int findLeaf()
        {
    
            return findLeaf(root);
        };
        //求二叉树中度数为1的结点数量
        int findNode()
        {
    
            return findNode(root);
        }
    };

snippet istream "friend istream" 
    friend std::istream& operator>> (std::istream& is ,${1:Object}& rhs){
        is >> rhs.$2;
        return is;
    }

snippet ostream "friend ostream" 
    os << rhs.$2 << std::endl;
        friend std::ostream& operator<< (std::ostream& os ,${1:Object}& rhs){
        return os;
    }

snippet get_type "get the typename " 
    #include <cxxabi.h>
    #include <string>
    template <typename T>
    std::string type_name()
    {
        int status;
        auto tname = typeid(T).name();
        char* demangled_name = abi::__cxa_demangle(tname, NULL, NULL, &status);
        if (status == 0) {
            std::string ret(demangled_name);
            std::free(demangled_name);
            return ret;
        }
        return "";
    }

snippet gbench "google benchmark"
    #include <benchmark/benchmark.h>
    
    #include <algorithm>
    #include <vector>
    
    static void ${1:BM_VectorCreation}(benchmark::State& state) {
        for (auto _ : state) {
            std::vector<int>{};
        }
    }
    BENCHMARK($1);
    
    BENCHMARK_MAIN();
    endsnippet
    snippet bench "benchmark block"
    
    static void ${1:BenchMark_fun}(benchmark::State& state){
    	${2:// pre condition}
    	for ( auto _ :state ){
    		${3:// to do}
    	}
    }
    BENCHMARK($1);

snippet doc "doxygen"
    /**
    * @brief ${1:brief}
    * @param ${2:param1}
    * @return 
    */

snippet file "file" 
    /**
     * @file `!p snip.rv = snip.basename or "name"`
     * @brief ${1:描述}
     * @author qad
     * @date 2021-05-06
     * @copyright ${2:comany}
     * @version 0.1
     */

snippet op "operator++"
    // post add
    ${1:testclasss} operator++( ${2:type}  dummy)
    {
            $1 dummy_val(*this);
            operator++();
            return dummy_val;
    }

    // pre add
    $1& operator++() {
            ${3: add logic};
            return *this;
    }

snippet list "list util"
    #include <iostream>
    #include <vector>
    
    // 1. 反转字符串
    // 2. 反转链表
    // 3. 找出链表倒数第k个节点
    
    template <typename T>
    struct ListNode {
        T val;
        struct ListNode<T>* next;
        ListNode() : val(), next(nullptr) {}
        ListNode(T val) : val(val), next(nullptr) {}
        ListNode(T val, ListNode<T>* next) : val(val), next(next) {}
    };
    
    namespace listutil{
    
    
        // 反转字符串
        std::string Reverse(const std::string& str) {
            if (str.size() == 0) {
                return "";
            }
            return Reverse(str.substr(1, str.size() - 1)) + str[0];
        }
    
        // 返回链表倒数第k个节点
        template <typename T>
        ListNode<T>* FindLastKNode(ListNode<T>* list, const unsigned int k) {
            ListNode<T>* fast = list;
            ListNode<T>* slow = list;
            unsigned int i = 0;
            while (fast != nullptr && i < k) {
                fast = fast->next;
                i++;
            }
    
            if (i < k) {
                return nullptr;
            }
    
            while (fast != nullptr) {
                fast = fast->next;
                slow = slow->next;
            }
    
            return slow;
        }
    
        // 判断链表是否有环
        template <typename T>
        bool HaveCircle(ListNode<T>* list) {
            // circle
            ListNode<T>* fast = list;
            ListNode<T>* slow = list;
    
            while (fast != nullptr && fast->next != nullptr) {
                fast = fast->next->next;
                slow = slow->next;
                if (slow == fast) {
                    return true;
                }
            }
    
            return false;
        }
    
        ///* 👖->  (👖->👖->👖->👖->👖->👖->👖)
        ///* 先将子链表反转，反转之后将 头连接起来
        template <typename T>
        ListNode<T>* Reverse(ListNode<T>* list) {
            if (list == nullptr) {
                return nullptr;
            }
            ListNode<T>* savedlist = list;
            ListNode<T>* tail = Reverse(list->next);
    
            // 在返回的结尾 加上这个这一层 的头
            ListNode<T>* sub_list_head = tail;
    
            while (tail != nullptr && tail->next != nullptr) {
                tail = tail->next;
            }
    
            savedlist->next = nullptr;
            if (tail == nullptr) {
                return savedlist;
            }
    
            tail->next = savedlist;
            return sub_list_head;
        }
    
    template <typename T>
    ListNode<T>* ConstructList(const std::vector<T>& elements) {
        ListNode<T> head;
        ListNode<T>* tail = &head;
    
        for (auto& ptr : elements) {
            tail->next = new ListNode<T>(ptr);
            tail = tail->next;
        }
    
        return head.next;
    }
    
    template <typename T>
    void ExpectEqList(ListNode<T>* list, const std::vector<T>& elemets) {
        int count = 0;
        ListNode<T>* ptr = list;
        while (ptr != nullptr) {
            if (ptr->val !=  elemets[count]) throw std::exception();
            ptr = ptr->next;
            count++;
        }
    }
    
    template <typename T>
    void FreeList(ListNode<T>* list) {
        ListNode<T>* pre = list;
        while (list != nullptr) {
            list = list->next;
            delete pre;
            pre = list;
        }
    }
    
    }

snippet table3 "table"
     ___ ___ ___ 
    | 1 | 2 | 3 |
    |___|___|___|
    | 4 | 5 | 6 |
    |___|___|___|
    | 7 | 8 | 9 |
    |___|___|___|


snippet table4 "table4"
     ___ ___ ___ ___ 
    | 1 | 2 | 3 | 4 |
    |___|___|___|___|
    | 5 | 6 | 7 | 8 |
    |___|___|___|___|
    | 9 |10 |11 |12 |
    |___|___|___|___|
    | 13|14 |15 |16 |
    |___|___|___|___|
