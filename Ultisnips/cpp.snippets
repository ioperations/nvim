snippet inp "include cpp"
#include <${1:iostream>}
endsnippet

snippet fora " for auto ptr"
for(auto ${1:ptr} : ${2:vector}){
    std::cout<< $1 << std::endl ;
}
endsnippet

snippet usi "using namespace"
using namespace ${1:std};
endsnippet

snippet sort " for auto ptr"
sort(${1:a}.begin(),$1.end());
endsnippet


snippet find " for auto ptr"
find(${1:a}.begin(),$1.end(),${2:1});
endsnippet

snippet forj "for loop"
for(int ${1:i}=0; $1 != ${2:count}; $1++){

}
endsnippet

snippet gtest "gtest framework"
#include <iostream>
#include <gtest/gtest.h>

TEST(${1:testName},${2:testNum}){

}

int main(int argc, char *argv[])
{
    testing::InitGoogleTest(&argc,argv);
    return RUN_ALL_TESTS();
}

endsnippet

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet walkarray "遍历数组"
for(int i=0;i<${1:Row};i++){
    for(int j=0;j<${2:Col};j++){
        if(rand()%2){
            *((int*)${3:Array} +i*$2 + j) = 0;
        }
    }
}
endsnippet

snippet little_endian "check if the system is little_endian"
union {
    int i;
    char c[sizeof(int)];
} x;

x.i = 0x0001;
// big endian
// | 00000001 | 00000002 | 00000003 |0000004 |
// |        0 |        0 |        0 |      1 |
//
// little endian
// | 00000001 | 00000002 | 00000003 |0000004 |
// |        1 |        0 |        0 |      0 |

//little_endian
if(x.c[0] == 1){
    ${1://TODO}
}
endsnippet

snippet cerr " std::cerr output "
std::cerr << ${1} << std::endl;
endsnippet

snippet process_bar "status process bar"
// 让输出可以重新被覆盖
std::cout << "\e[A";
endsnippet

snippet /* "the doxygen brief 中英语"
/// * @brief ${1:brief comments}
/// * ${2:the full story}
endsnippet

snippet // "the doxygen comment"
/**
\if english
<pre>
${1:the english comment about this block}
</pre>
\else
<pre>
${2: 中文注释}
</pre>
\endif
         */
endsnippet

snippet singleton " to generate a singleton"

#include<iostream>
#include<mutex>

/// singleton class ${1:singleton}
class $1 {
    public:
        static $1 * getInstance(){
            if (instance == NULL) {
                objmutex.lock();
                if(instance == NULL ){
                    instance = new $1();
                }
                objmutex.unlock();
            }
            return instance;
        };
    private:
        /// >>>> deconstructor
        ~$1(){

        }
        /// >>>> constructor
        $1(){

        }
        /// >>>> ensure the singleton being freed by c++ compiler
        class globalgc{
            public:
                ~globalgc(){
                    if (instance) {
                        delete instance;
                    }
                }
        };

        static globalgc gc_obj;
        static std::mutex objmutex;
        static $1* instance;

};

$1::globalgc $1::gc_obj;
std::mutex $1::objmutex;
$1 *  $1::instance = NULL ;

endsnippet

snippet binaryTree "c++ binaryTree template" 
#include <iostream>
template <typename T>
struct tree {
    T data;
    tree *left, *right;
};

#if __cplusplus > 201703L
template <typename T>
concept fill_in_the_need_for_Btree = requires(T t1, T t2)
{
    t1 > t2;
    t1 < t2;
    t1 = t2;
    std::cout << t1;
};
#endif

#if __cplusplus > 201703L
template <fill_in_the_need_for_Btree T>
#else
template <typename T>
#endif
class Btree {
private:
    static int n;
    static int m;
    tree<T>* root;

public:
    Btree()
    {
        root = nullptr;
    }

protected:
    void erase_btree(tree<T>* root_)
    {
        if (root_ == nullptr) {
            return;
        }

        erase_btree(root_->left);
        erase_btree(root_->right);
        delete root_;
        return;
    }

    /// 先序遍历
    void preOrder(tree<T>* temp)
    {
        if (temp != nullptr) {
            std::cout << temp->data << " ";
            preOrder(temp->left);
            preOrder(temp->right);
        }
    }
    /// 中序遍历
    void inOrder(tree<T>* temp)
    {
        {
            if (temp != nullptr) {
                inOrder(temp->left);
                std::cout << temp->data << " ";
                inOrder(temp->right);
            }
        }
    }
    /// 后序遍历
    void postOrder(tree<T>* temp)
    {
        if (temp != nullptr) {
            postOrder(temp->left);
            postOrder(temp->right);
            std::cout << temp->data << " ";
        }
    }
    /// 计算二叉树的个数
    int count(tree<T>* p)
    {
        if (p == nullptr)
            return 0;
        else
            return count(p->left) + count(p->right) + 1;
    }
    /// 求二叉树叶子的个数
    int findLeaf(tree<T>* temp)
    {
        if (temp == nullptr)
            return 0;
        else {
            if (temp->left == nullptr && temp->right == nullptr)
                return n += 1;
            else {
                findLeaf(temp->left);
                findLeaf(temp->right);
            }
        }
        return 0;
    }
    /// 求二叉树叶子的个数
    int findNode(tree<T>* temp)
    {
        if (temp == nullptr)
            return 0;
        else {
            if (temp->left != nullptr && temp->right != nullptr) {
                findNode(temp->left);
                findNode(temp->right);
            }
            if (temp->left != nullptr && temp->right == nullptr) {
                m += 1;
                findNode(temp->left);
            }
            if (temp->left == nullptr && temp->right != nullptr) {
                m += 1;
                findNode(temp->right);
            }
        }
        return m;
    }

public:
    void erase_btree()
    {
        erase_btree(root);
    }
    void create_Btree(T x)
    {
        {
            tree<T>* newNode = new tree<T>;
            newNode->data = x;
            newNode->right = newNode->left = nullptr;
            if (root == nullptr)
                root = newNode;
            else {
                tree<T>* back;
                tree<T>* current = root;
                while (current != nullptr) {
                    back = current;
                    if (current->data > x)
                        current = current->left;
                    else
                        current = current->right;
                }
                if (back->data > x)
                    back->left = newNode;
                else
                    back->right = newNode;
            }
        }
    }
    ///先序遍历
    void preOrder()
    {
        preOrder(root);
    }
    ///中序遍历
    void inOrder()
    {
        inOrder(root);
    };
    ///后序遍历
    void postOrder()
    {
        postOrder(root);
    };
    ///计算二叉树的个数
    int count()
    {
        return count(root);
    };
    ///求二叉树叶子的个数
    int findLeaf()
    {

        return findLeaf(root);
    };
    //求二叉树中度数为1的结点数量
    int findNode()
    {

        return findNode(root);
    }
};
endsnippet

snippet istream "friend istream" 
friend std::istream& operator>> (std::istream& is ,${1:Object}& rhs){
    is >> rhs.$2;
    return is;
}
endsnippet
snippet ostream "friend ostream" 
friend std::ostream& operator<< (std::ostream& os ,${1:Object}& rhs){
    os << rhs.$2 << std::endl;
    return os;
}
endsnippet

snippet get_type "get the typename " 
#include <cxxabi.h>
#include <string>
template <typename T>
std::string type_name()
{
    int status;
    auto tname = typeid(T).name();
    char* demangled_name = abi::__cxa_demangle(tname, NULL, NULL, &status);
    if (status == 0) {
        std::string ret(demangled_name);
        std::free(demangled_name);
        return ret;
    }
    return "";
}
endsnippet
